// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Difficulty {
  BEGINNER
  EASY
  MEDIUM
  HARD
  EXTREME
}

enum RoleTypes {
  USER
  ADMIN
  MODERATOR
}

enum Status {
  BANNED
  ACTIVE // can post, comment, vote, etc
  PENDING // must finish x number of challenges to be active
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Role {
  id   String    @id @default(uuid())
  user User[]
  role RoleTypes @unique
}

model User {
  id              String             @id @default(uuid())
  name            String?
  email           String?            @unique
  roles           Role[]
  status          Status             @default(PENDING)
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  Challenge       Challenge[]
  Vote            Vote[]
  Solution        Solution[]
  Report          Report[]
  Bookmark        Bookmark[]
  SharedSolution  SharedSolution[]
  Comment         ChallengeComment[]
  Reply           ChallengeReply[]
  SolutionComment SolutionComment[]
  SolutionReply   SolutionReply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Challenge {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  difficulty       Difficulty
  name             String
  description      String             @db.MediumText
  shortDescription String
  prompt           String             @db.MediumText
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  Vote             Vote[]
  Solution         Solution[]
  Comment          ChallengeComment[]
  Report           Report[]
  Bookmark         Bookmark[]
  SharedSolution   SharedSolution[]

  @@index([userId])
}

model Vote {
  id               Int             @id @default(autoincrement())
  user             User            @relation(fields: [userId], references: [id])
  userId           String
  challenge        Challenge?      @relation(fields: [challengeId], references: [id])
  challengeId      Int?
  solution         Solution?       @relation(fields: [solutionId], references: [id])
  solutionId       Int?
  SharedSolution   SharedSolution? @relation(fields: [sharedSolutionId], references: [id])
  sharedSolutionId Int?

  @@index([userId])
  @@index([challengeId])
  @@index([solutionId])
}

model SharedSolution {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  description     String            @db.MediumText
  solution        Solution          @relation(fields: [solutionId], references: [id])
  solutionId      Int
  Vote            Vote[]
  User            User?             @relation(fields: [userId], references: [id])
  userId          String?
  Challenge       Challenge?        @relation(fields: [challengeId], references: [id])
  challengeId     Int?
  SolutionComment SolutionComment[]

  @@index([solutionId])
  @@index([userId])
  @@index([challengeId])
}

model Solution {
  id             Int              @id @default(autoincrement())
  code           String           @db.MediumText
  createdAt      DateTime         @default(now())
  isSuccessful   Boolean
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  challenge      Challenge        @relation(fields: [challengeId], references: [id])
  challengeId    Int
  Vote           Vote[]
  SharedSolution SharedSolution[]

  @@index([userId])
  @@index([challengeId])
}

model ChallengeComment {
  id          Int              @id @default(autoincrement())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  challenge   Challenge        @relation(fields: [challengeId], references: [id])
  challengeId Int
  text        String
  replies     ChallengeReply[]

  @@index([userId])
  @@index([challengeId])
}

model ChallengeReply {
  id        Int              @id @default(autoincrement())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  comment   ChallengeComment @relation(fields: [commentId], references: [id])
  commentId Int
  text      String

  @@index([userId])
  @@index([commentId])
}

model SolutionComment {
  id            Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id])
  userId        String
  solution      SharedSolution  @relation(fields: [solutionId], references: [id])
  solutionId    Int
  text          String
  SolutionReply SolutionReply[]

  @@index([userId])
  @@index([solutionId])
}

model SolutionReply {
  id         Int             @id @default(autoincrement())
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  solution   SolutionComment @relation(fields: [solutionId], references: [id])
  solutionId Int
  text       String

  @@index([userId])
  @@index([solutionId])
}

model Report {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId Int
  text        String
  derogatory  Boolean   @default(false)
  unclear     Boolean   @default(false)

  @@index([userId])
  @@index([challengeId])
}

model Bookmark {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId Int?

  @@index([userId])
  @@index([challengeId])
}
