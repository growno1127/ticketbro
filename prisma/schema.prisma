// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Difficulty {
  BEGINNER
  EASY
  MEDIUM
  HARD
  EXTREME
}

enum RoleTypes {
  USER
  ADMIN
  MODERATOR
}

enum UserStatus {
  BANNED
  ACTIVE // can post, comment, vote, etc
  PENDING // must finish x number of challenges to be active
}

enum ReportStatus {
  PENDING
  CLEARED
  DISMISSED
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Role {
  id   String    @id @default(uuid())
  user User[]
  role RoleTypes @unique
}

model User {
  id String @id @default(uuid())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roles         Role[]

  status    UserStatus @default(PENDING)
  banReason String?    @db.MediumText

  accounts         Account[]
  sessions         Session[]
  challenge        Challenge[]
  vote             Vote[]
  solution         Solution[]
  report           Report[]           @relation(name: "report_author")
  moderatedReports Report[]           @relation(name: "moderated_reports")
  bookmark         Bookmark[]
  sharedSolution   SharedSolution[]
  comment          ChallengeComment[]
  reply            ChallengeReply[]
  solutionComment  SolutionComment[]
  solutionReply    SolutionReply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Challenge {
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  difficulty       Difficulty
  name             String
  description      String     @db.MediumText
  shortDescription String
  prompt           String     @db.MediumText
  disabled         Boolean    @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  vote           Vote[]
  solution       Solution[]
  comment        ChallengeComment[]
  report         Report[]
  bookmark       Bookmark[]
  sharedSolution SharedSolution[]

  @@index([userId])
}

model Vote {
  id               Int             @id @default(autoincrement())
  user             User            @relation(fields: [userId], references: [id])
  userId           String
  challenge        Challenge?      @relation(fields: [challengeId], references: [id])
  challengeId      Int?
  solution         Solution?       @relation(fields: [solutionId], references: [id])
  solutionId       Int?
  sharedSolution   SharedSolution? @relation(fields: [sharedSolutionId], references: [id])
  sharedSolutionId Int?

  @@index([userId])
  @@index([challengeId])
  @@index([solutionId])
}

/// This is a public solution created by a user for a challenge
model SharedSolution {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  title           String
  description     String            @db.MediumText
  vote            Vote[]
  user            User?             @relation(fields: [userId], references: [id])
  userId          String?
  challenge       Challenge?        @relation(fields: [challengeId], references: [id])
  challengeId     Int?
  solutionComment SolutionComment[]

  @@index([userId])
  @@index([challengeId])
}

/// This is a submission of a challenge
model Solution {
  id           Int       @id @default(autoincrement())
  code         String    @db.MediumText
  createdAt    DateTime  @default(now())
  isSuccessful Boolean
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  challenge    Challenge @relation(fields: [challengeId], references: [id])
  challengeId  Int
  vote         Vote[]

  @@index([userId])
  @@index([challengeId])
}

model ChallengeComment {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  challenge   Challenge        @relation(fields: [challengeId], references: [id])
  challengeId Int
  text        String
  replies     ChallengeReply[]

  @@index([userId])
  @@index([challengeId])
}

model ChallengeReply {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  comment   ChallengeComment @relation(fields: [commentId], references: [id])
  commentId Int
  text      String

  @@index([userId])
  @@index([commentId])
}

model SolutionComment {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id])
  userId        String
  solution      SharedSolution  @relation(fields: [solutionId], references: [id])
  solutionId    Int
  text          String
  solutionReply SolutionReply[]

  @@index([userId])
  @@index([solutionId])
}

model SolutionReply {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now())
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  solution   SolutionComment @relation(fields: [solutionId], references: [id])
  solutionId Int
  text       String

  @@index([userId])
  @@index([solutionId])
}

model Report {
  id Int @id @default(autoincrement())

  author   User   @relation(fields: [authorId], references: [id], name: "report_author")
  authorId String

  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId Int

  text       String       @db.MediumText
  derogatory Boolean      @default(false)
  unclear    Boolean      @default(false)
  status     ReportStatus @default(PENDING)

  moderator   User?   @relation(fields: [moderatorId], references: [id], name: "moderated_reports")
  moderatorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([challengeId])
}

model Bookmark {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId Int?

  @@index([userId])
  @@index([challengeId])
}
